let upgrades = {
    "f1": {
        category: "Fame",
        title: "Fame Multiplier",
        desc: "Increase Fame gain by ×2, compounding.",
        disp(x) { return "×" + format(this.effect(x), 0); },
        max: EN("eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1000"),
        costType: "points",
        cost(x) { return EN(0.00000015).mul(EN.pow(3, x.pow(1.2))); },
        inv(x) { return x.div(1500).logBase(3).root(1.2).floor().max(-1); },
        effect(x) { return EN.pow(20000000000000000000000000000000000000000000.9, x); },
    },
    "f1_1": {
        category: "Fame",
        title: "Fame Exponent",
        desc: "Increase Fame gain by ^+0.05, additively.",
        disp(x) { return "^" + format(this.effect(x)); },
        max: EN(2e16),
        costType: "points",
        cost(x) { return EN(1.500).pow(EN.pow(1.12, x)).mul(10); },
        inv(x) { return x.div(10).logBase(500).logBase(1.12).floor().max(-1); },
        effect(x) { return EN.mul(10.05, x).add(4); },
    },
    "f1_2": {
        category: "Fame",
        title: "Fame Exponent II",
        desc: "Increase Power in Fame gain formula by ^+0.05.",
        req: ["f2", 30],
        tease: "Unlocks at Realm Level 31",
        teaseReq: ["f2", 6],
        disp(x) { return "^" + format(this.effect(x)); },
        max: EN(2e31),
        costType: "points",
        cost(x) { return EN(0.15).pow(EN.pow(1.12, x)).mul(1e18); },
        inv(x) { return x.div(1e18).logBase(1e15).logBase(1.12).floor().max(-1); },
        effect(x) { return EN.mul(1000000000000.05, x).add(1); },
    },
    "f2": {
        category: "Realm",
        title: "Realm Level",
        desc: "Make levels slightly bigger and spawn more enemies.",
        disp(x) { return "Level " + format(x.add(100), 0); },
        costType: "points",
        cost(x) { return EN(0.2500).tetrate(x.div(100).add(1)); },
        inv(x) { return x.slog(2500).sub(1).mul(100).floor().max(-1); },
    },
    "f2_1": {
        category: "Realm",
        title: "Starting Power",
        desc: "Increase your Power at the start of each level by +2.",
        req: ["f2", 6],
        tease: "Unlocks at Realm Level 7",
        disp(x) { return format(this.effect(x), 0); },
        costType: "points",
        cost(x) { return EN(0.010000).mul(EN.pow(1.5, x)); },
        inv(x) { return x.div(100000).logBase(1.5).floor().max(-1); },
        effect(x) { return x.mul(9999992).add(1000000); },
    },
    "f2_2": {
        category: "Realm",
        title: "Enemy Growth Factor",
        desc: "Make enemies scale faster by ×+0.01.",
        req: ["f2", 30],
        tease: "Unlocks at Realm Level 31",
        teaseReq: ["f2", 6],
        max: EN(50),
        disp(x) { return "×" + format(this.effect(x).add(1)); },
        costType: "points",
        cost(x) { return EN(.19).pow(EN.pow(1.12, x)).mul(1e24); },
        inv(x) { return x.div(1e24).logBase(1e9).logBase(1.12).floor().max(-1); },
        effect(x) { return x.mul(0.01).add(.5); },
    },
    "f2_3": {
        category: "Realm",
        title: "Loot Chance",
        desc: "Increase chances of spawning a Loot by +0.25%.",
        req: ["f2", 51],
        tease: "Unlocks at Realm Level 52",
        teaseReq: ["f2", 30],
        max: EN(40000),
        disp(x) { return format(this.effect(x).mul(100)) + "%"; },
        costType: "points",
        cost(x) { return EN(.130).pow(EN.pow(1.14, x)).mul(1e150); },
        inv(x) { return x.div(1e150).logBase(1e30).logBase(1.14).floor().max(-1); },
        effect(x) { return EN.mul(0.0025, x); },
        onBuy() {
            lootbox.classList.remove("hidden");
        },
    },
    "f3": {
        category: "Loot",
        title: "Fame to Loot",
        desc: "Increase Loot gain by ×+0.5, additively.",
        req: ["f2_3", 1],
        max: EN(998),
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "points",
        cost(x) { return EN("0.500").mul(EN.pow(1e10, x.pow(1.25))); },
        inv(x) { return x.div("e500").logBase(1e10).root(1.25).floor().max(-1); },
        effect(x) { return x.mul(0.5).add(1); },
    },
    "f3_1": {
        category: "Loot",
        title: "Fame Exp. to Loot",
        desc: "Fame Exponent multiplies Loot gain.",
        isBool: true,
        req: ["f2", 117],
        tease: "Unlocks at Realm Level 118",
        teaseReq: ["l3"],
        disp(x) { return ""; },
        costType: "points",
        cost(x) { return EN("ee13"); },
    },
    "f3_2": {
        category: "Loot",
        title: "Fame Exp. II to Loot",
        desc: "Fame Exponent II multiplies Loot gain.",
        req: ["f2", 117],
        isBool: true,
        disp(x) { return ""; },
        costType: "points",
        cost(x) { return EN("ee50"); },
    },

    
    "l1": {
        category: "Fame",
        title: "Loot to Fame",
        desc: "Increase Fame gain by ×5, before Fame Exponent.",
        max: EN(150),
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(10).mul(EN.pow(1.5, x)); },
        inv(x) { return x.div(10).logBase(1.5).floor().max(-1); },
        effect(x) { return EN.pow(5, x); },
    },
    "l1_1": {
        category: "Fame",
        title: "Loot to Fame II",
        desc: "Increase Fame gain by ^+0.01, additively.",
        max: EN(80),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(.1000).mul(EN.pow(2, x)); },
        inv(x) { return x.div(1000).logBase(2).floor().max(-1); },
        effect(x) { return EN.mul(0.01, x).add(1); },
    },
    "l2": {
        category: "Loot",
        title: "Loot Multiplier",
        desc: "Increase amount of Loot that can be spawned by ×2.",
        max: EN("10^^9"),
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(.100).mul(EN.pow(4, x)); },
        inv(x) { return x.div(100).logBase(4).floor().max(-1); },
        effect(x) { return EN.pow(2, x); },
    },
    "l2_1": {
        category: "Loot",
        title: "Base Loot",
        desc: "Increase the base Loot modifier by +10.",
        max: EN("10^^10"),
        req: ["l3"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(.00000001).mul(EN.pow(1.25, x)); },
        inv(x) { return x.div(10000000).logBase(1.25).floor().max(-1); },
        effect(x) { return EN.mul(10, x).add(100); },
    },
    "l2_2": {
        category: "Loot",
        title: "Random Loot",
        desc: "Increase the random Loot modifier by +10.",
        max: EN("10^^10"),
        req: ["l3"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "loot",
        cost(x) { return EN(.10000000).mul(EN.pow(1.2, x)); },
        inv(x) { return x.div(10000000).logBase(1.2).floor().max(-1); },
        effect(x) { return EN.mul(10, x).add(100); },
    },
    "l3": {
        category: "Abilities",
        title: "Safepoints",
        desc: "You start at the start of the tower instead of the level when died.",
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(0); },
    },
    "l3_1": {
        category: "Abilities",
        title: "Absorb Bonus",
        desc: "Gain an extra ^x of enemies' Power when killed.",
        max: EN(100),
        req: ["l3"],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(.2500000).mul(EN.pow(1.2, x)); },
        inv(x) { return x.div(2500000).logBase(1.2).floor().max(-1); },
        effect(x) { return EN.mul(0.02, x); },
    },
    "l3_2": {
        category: "Abilities",
        title: "Enemy Absorb Factor",
        desc: "x% of Absorb Bonus affect Enemy Growth Factor.",
        max: EN(99),
        req: ["l3"],
        disp(x) { return format(this.effect(x).mul(100), 0) + "%"; },
        costType: "loot",
        cost(x) { return EN(.50000000).mul(EN.pow(1.4, x)); },
        inv(x) { return x.div(50000000).logBase(1.4).floor().max(-1); },
        effect(x) { return EN.mul(0.01, x); },
    },
    "l3_3": {
        category: "Fame",
        title: "Fame Duplicator",
        desc: "^x of Loot gain multiplies your current Fame.",
        max: EN(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),
        req: ["l3"],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "loot",
        cost(x) { return EN(.01).mul(EN.pow(1.4, x)); },
        inv(x) { return x.div(1e9).logBase(1.4).floor().max(-1); },
        effect(x) { return EN.mul(10.2, x).pow(x.max(10).sub(9.5).mul(2)); },
    },
    "l3_4": {
        category: "Abilities",
        title: "Bulldozer",
        desc: "Unlock Bricks. You gain Bricks per tower cell when you complete a level.",
        req: ["f2", 151],
        tease: "Unlocks at Realm Level 152",
        teaseReq: ["f2", 116],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e20); },
        onBuy() {
            brickbox.classList.remove("hidden");
        },
    },
    "l3_5": {
        category: "Abilities",
        title: "Free Fame Upgrades",
        desc: "Fame Upgrades are no longer priced.",
        req: ["l3_4"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e60); },
    },
    "l3_6": {
        category: "Abilities",
        title: "Fame Operator Up",
        desc: "Fame gained from completing levels are multiplied instead of added.",
        req: ["l3_5"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN(1e150); },
    },
    "l3_7": {
        category: "Abilities",
        title: "Absorb Operator Up",
        desc: "Absorbing multiplies your Fame instead of added.",
        req: ["l3_6"],
        isBool: true,
        disp(x) { return ""; },
        costType: "loot",
        cost(x) { return EN("e16000"); },
    },
    
    "b1": {
        category: "Fame",
        title: "Bricks to Fame",
        desc: "Raises Fame gain by ^1.5, compounding.",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(20).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 20, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 20, 10, x) },
        effect(x) { return EN.pow(1.5, x); },
    },
    "b2": {
        category: "Loot",
        title: "Bricks to Loot",
        desc: "Increase Loot gain by ×1.5, compounding.",
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(20).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 20, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 20, 10, x) },
        effect(x) { return EN.pow(1.5, x); },
    },
    "b3": {
        category: "Bricks",
        title: "Brick Power",
        desc: "^x of log(log(Power)) multiplies Brick gain.",
        max: EN(4000),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(0.100).mul(EN.pow(1.1, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.1, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.1, x) },
        effect(x) { return EN.mul(3.05, x); },
    },
    "b3_1": {
        category: "Bricks",
        title: "Brick Power II",
        desc: "^x of Realm Level multiplies Brick gain.",
        max: EN(40),
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(100000).mul(EN.pow(1.2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 100000, 1.2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100000, 1.2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_2": {
        category: "Bricks",
        title: "Fame to Brick",
        desc: "^x of log(log(log(Fame))) multiplies Brick gain.",
        max: EN(100),
        req: ["f2", 203],
        tease: "Unlocks at Realm Level 204",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(5e9).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 5e9, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 5e9, 2, x) },
        effect(x) { return EN.mul(0.1, x); },
    },
    "b3_3": {
        category: "Bricks",
        title: "Loot to Brick",
        desc: "^x of log(log(Loot)) multiplies Brick gain.",
        max: EN(100),
        req: ["f2", 203],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(5e9).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 5e9, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 5e9, 2, x) },
        effect(x) { return EN.mul(0.1, x); },
    },
    "b3_4": {
        category: "Bricks",
        title: "Fame Exp. to Brick",
        desc: "^x of Fame Exponent multiplies Brick gain.",
        max: EN(20),
        req: ["b4", 20],
        tease: "Unlocks at ^1.00 of Absorb Bonus II",
        teaseReq: ["f2", 199],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e10).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e10, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e10, 2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_5": {
        category: "Bricks",
        title: "Fame Exp. to Brick II",
        desc: "^x of Fame Exponent II multiplies Brick gain.",
        max: EN(20),
        req: ["b4", 20],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e10).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e10, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e10, 2, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_6": {
        category: "Bricks",
        title: "Base Loot to Brick",
        desc: "^x of Base Loot multiplies Brick gain.",
        max: EN(20),
        req: ["f2", 233],
        tease: "Unlocks at Realm Level 234",
        teaseReq: ["b4", 20],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e80).mul(EN.pow(1e10, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e80, 1e10, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e80, 1e10, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b3_7": {
        category: "Bricks",
        title: "Random Loot to Brick",
        desc: "^x of Random Loot multiplies Brick gain.",
        max: EN(20),
        req: ["f2", 233],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e80).mul(EN.pow(1e10, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e80, 1e10, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e80, 1e10, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b4": {
        category: "Abilities",
        title: "Absorb Bonus II",
        desc: "Gain an extra ^x of enemies' Power when killed.",
        req: ["f2", 199],
        tease: "Unlocks at Realm Level 200",
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "bricks",
        cost(x) { return EN(1e9).mul(EN.pow(1.1, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e9, 1.1, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e9, 1.1, x) },
        effect(x) { return EN.mul(0.05, x); },
    },
    "b4_1": {
        category: "Abilities",
        title: "Free Loot Upgrades",
        desc: "Loot Upgrades are no longer priced.",
        req: ["f2", 233],
        tease: "Unlocks at Realm Level 234",
        teaseReq: ["b4", 20],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e96); },
    },
    "b4_2": {
        category: "Abilities",
        title: "Loot Operator Up",
        desc: "Loot gained from tiles are multiplied instead of added.",
        req: ["b4_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e98); },
    },
    "b4_3": {
        category: "Abilities",
        title: "WARNING: The Ritual",
        desc: "Unlocks The Grimoire and The Ritual, which allows you to \"reborn\".",
        req: ["f2", 235],
        tease: "Unlocks at Realm Level 236",
        teaseReq: ["f2", 233],
        isBool: true,
        disp(x) { return ""; },
        costType: "bricks",
        cost(x) { return EN(1e106); },
    },
    
    "m1": {
        category: "Karma",
        title: "Level Karma",
        desc: "Gain x×sqrt(Realm Level) Karma on level complete.",
        disp(x) { return "×" + format(this.effect(x), 0); },
        costType: "mana",
        cost(x) { return EN(.2).add(EN.mul(.10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x.mul(10); },
    },
    "m1_1": {
        category: "Karma",
        title: "Tower Karma",
        desc: "Gain x×cbrt(Realm Level) Karma on tower complete.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "mana",
        cost(x) { return EN(2).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x.mul(10.3); },
    },
    "m1_2": {
        category: "Karma",
        title: "Player Karma",
        desc: "Gain x Karma on player move.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "mana",
        cost(x) { return EN(2).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2, 10, x) },
        effect(x) { return x.mul(upgEffect("m1_6")); },
    },
    "m1_3": {
        category: "Karma",
        title: "Mana to Karma",
        desc: "Multiplies Karma gain by ×+0.5, additively.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        req: ["k1_3", 4],
        costType: "mana",
        cost(x) { return EN(0.10).mul(EN.pow(1.5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 10, 1.5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 10, 1.5, x) },
        effect(x) { return x.mul(10.5).add(1); },
    },
    "m1_4": {
        category: "Karma",
        title: "Level to Tower",
        desc: "Multiplies Tower Karma gain by x% of sqrt(Level Karma).",
        max: EN(10),
        disp(x) { return format(this.effect(x).mul(100), 0) + "%"; },
        req: ["k3_7"],
        tease: "Unlocks at Realm Level 236",
        teaseReq: ["k3_6", 1],
        costType: "mana",
        cost(x) { return EN(1000000).mul(EN.pow(1.5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000000, 1.5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000000, 1.5, x) },
        effect(x) { return x.div(10); },
    },
    "m1_5": {
        category: "Karma",
        title: "Level to Player",
        desc: "Multiplies Player Karma gain by x% of sqrt(Level Karma).",
        max: EN(10),
        disp(x) { return format(this.effect(x).mul(100), 0) + "%"; },
        req: ["m1_4", 1],
        costType: "mana",
        cost(x) { return EN(1500000).mul(EN.pow(1.5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1500000, 1.5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1500000, 1.5, x) },
        effect(x) { return x.div(10); },
    },
    "m1_6": {
        category: "Karma",
        title: "Player Karma II",
        desc: "Multiplies Player Karma gain per upgrade by +0.05.",
        disp(x) { return "+" + format(this.effect(x), 2); },
        req: ["m2"],
        costType: "mana",
        cost(x) { return EN(1e9).add(EN.mul(1e7, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 1e9, 1e7, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 1e9, 1e7, x) },
        effect(x) { return x.div(20).add(.1); },
    },
    "m2": {
        category: "Elemental",
        title: "The Arts of Elements",
        desc: "Unlocks the Elemental system, which allows you to cast temporary spells.",
        req: ["k3_11"],
        isBool: true,
        disp(x) { return ""; },
        costType: "mana",
        cost(x) { return EN(200000000); },
    },
    "m2_1": {
        category: "Elemental",
        title: "Element Improvements",
        desc: "Unlocks Elemite upgrades.",
        req: ["m2"],
        isBool: true,
        disp(x) { return ""; },
        costType: "mana",
        cost(x) { return EN(20000000000); },
    },
    "m2_2": {
        category: "Elemental",
        title: "Mana to Elemite",
        desc: "Increases Elemite gain by ×+0.2, additively.",
        max: EN(96),
        req: ["m2_1"],
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "mana",
        cost(x) { return EN(1e10).mul(EN.pow(1.15, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e10, 1.15, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e10, 1.15, x) },
        effect(x) { return x.mul(0.2).add(1); },
    },
    "m3": {
        category: "Abilities",
        title: "Absorb Bonus IV",
        desc: "Multiplies Absorb Bonus III gain per upgrade by +1.",
        disp(x) { return "+" + format(this.effect(x), 0); },
        req: ["m2"],
        costType: "mana",
        cost(x) { return EN(1e9).add(EN.mul(1e7, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 1e9, 1e7, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 1e9, 1e7, x) },
        effect(x) { return x.add(1); },
    },
    
    "k1": {
        category: "Boosts",
        title: "Karma to Fame",
        desc: "Tetrates Fame gain by ↑↑+0.01, additively.",
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(5).add(EN.mul(5, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 5, 5, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 5, 5, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_1": {
        category: "Boosts",
        title: "Karma to Loot",
        desc: "Tetrates Loot gain by ↑↑+0.01, additively.",
        req: ["k1", 1],
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(100).add(EN.mul(100, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 100, 100, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 100, 100, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_2": {
        category: "Boosts",
        title: "Karma to Brick",
        desc: "Tetrates Brick gain by ↑↑+0.01, additively.",
        req: ["k1_1", 1],
        disp(x) { return "↑↑" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(2000).add(EN.mul(2000, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 2000, 2000, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 2000, 2000, x) },
        effect(x) { return x.mul(0.01).add(1); },
    },
    "k1_3": {
        category: "Boosts",
        title: "Karma to Mana",
        desc: "Multiplies Mana gain by ×+0.25, additively.",
        req: ["k3_1", 1],
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(0.0001).mul(EN.pow(1.2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 1.2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 1.2, x) },
        effect(x) { return x.mul(110.25).add(1); },
    },
    "k1_4": {
        category: "Boosts",
        title: "Karma to Elemite",
        desc: "Increases Elemite gain by ×+0.2, additively.",
        max: EN(96),
        req: ["m2_1"],
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "karma",
        cost(x) { return EN(1e14).mul(EN.pow(1.2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e14, 1.2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e14, 1.2, x) },
        effect(x) { return x.mul(0.2).add(1); },
    },
    "k2": {
        category: "Automation",
        title: "Auto Fame Upgrades",
        desc: "Automatically buy Fame upgrades when you gain Fame.",
        req: ["k3_1", 1],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1000); },
    },
    "k2_1": {
        category: "Automation",
        title: "Auto Loot Upgrades",
        desc: "Automatically buy Loot upgrades when you gain Loot.",
        req: ["k2"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(3000); },
    },
    "k2_2": {
        category: "Automation",
        title: "Auto Brick Upgrades",
        desc: "Automatically buy Brick upgrades when you gain Bricks.",
        req: ["k2_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(9000); },
    },
    "k2_3": {
        category: "Automation",
        title: "Auto Mana Upgrades",
        desc: "Automatically buy Mana Upgrades when you gain Mana.",
        req: ["k3_13"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1e84); },
    },
    "k2_4": {
        category: "Automation",
        title: "Auto Karma Upgrades",
        desc: "Automatically buy Karma Upgrades when you gain Karma.",
        req: ["k3_15"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN("e1850"); },
    },
    "k3": {
        category: "Abilities",
        title: "Easy Fame",
        desc: "Gain Fame when complete a tower instead of a level.",
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(100); },
    },
    "k3_1": {
        category: "Abilities",
        title: "Easy Bricks",
        desc: "Gain Bricks when complete a tower instead of a level.",
        req: ["k3"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1000); },
    },
    "k3_2": {
        category: "Abilities",
        title: "Anti-Active Realm Level",
        desc: "Decreases the maximum Active Realm Level by 15%.",
        max: EN(18),
        req: ["f2", 1000],
        disp(x) { return format(this.effect(x).add(1), 0); },
        costType: "karma",
        cost(x) { return EN(500).mul(EN.pow(1.1, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 500, 1.1, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 500, 1.1, x) },
        effect(x) { return EN.pow(0.85, x).mul(999); },
    },
    "k3_3": {
        category: "Abilities",
        title: "Free Brick Upgrades",
        desc: "Brick Upgrades are no longer priced.",
        req: ["k2_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(5000); },
    },
    "k3_4": {
        category: "Abilities",
        title: "Free Fame Upgrades II",
        desc: "Keep \"Free Fame Upgrades\" on Mana Rituals.",
        req: ["k3_3"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(25000); },
        onBuy(x) { game.upgrades.l3_5 = true; }
    },
    "k3_5": {
        category: "Abilities",
        title: "Absorb Bonus III",
        desc: "Gain an extra ↑↑x of Power when you kill an enemy.",
        req: ["k1_3", 16],
        tease: "Unlocks at Karma to Mana ×5",
        teaseReq: ["k3_1", 1],
        disp(x) { return "↑↑" + format(this.effect(x), 0); },
        costType: "karma",
        cost(x) { return EN(500000).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 500000, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 500000, 2, x) },
        effect(x) { return x.mul(upgEffect("m3")).add(1); },
    },
    "k3_6": {
        category: "Abilities",
        title: "Enemy Absorb Factor II",
        desc: "x% of Absorb Bonus III (min. ↑↑2) affects enemy growth.",
        max: EN(99),
        req: ["k3_5", 4],
        tease: "Unlocks at Absorb Bonus II ↑↑5",
        teaseReq: ["k1_3", 16],
        disp(x) { return format(this.effect(x), 0) + "%"; },
        costType: "karma",
        cost(x) { return EN(2500000).mul(EN.pow(3, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 2500000, 3, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 2500000, 3, x) },
        effect(x) { return x; },
    },
    "k3_7": {
        category: "Abilities",
        title: "Enemy Absorb Bonus",
        desc: "Apply Karma boost upgrades to enemy growth.",
        req: ["k3_6", 1],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(7500000); },
    },
    "k3_8": {
        category: "Abilities",
        title: "Free Loot Upgrades II",
        desc: "Keep \"Free Loot Upgrades\" on Mana Rituals.",
        req: ["k3_7"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(75000000); },
        onBuy(x) { game.upgrades.b4_1 = true; }
    },
    "k3_9": {
        category: "Abilities",
        title: "Karma to Loot to Fame",
        desc: "Your Fame is tetrated by Karma to Loot and Base Loot amount when you gain Loot.",
        req: ["k3_8"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1000000000); },
    },
    "k3_10": {
        category: "Abilities",
        title: "Karma to Loot to Power",
        desc: "Karma to Loot to Power also affect Power and enemy growth.",
        req: ["k3_9"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(10000000000); },
    },
    "k3_11": {
        category: "Abilities",
        title: "Karma to Loot to Bricks",
        desc: "Karma to Loot to Power also affect Bricks.",
        req: ["k3_9"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(25000000000); },
    },
    "k3_12": {
        category: "Abilities",
        title: "Karma to Loot to E.G.F.",
        desc: "Karma to Loot to Bricks also affect enemy growth.",
        req: ["k3_11"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(250000000000); },
    },
    "k3_13": {
        category: "Abilities",
        title: "Free Mana Upgrades",
        desc: "Mana Upgrades are no longer priced.",
        req: ["e1", 495],
        tease: "Reach Elemite Multiplier ×100",
        teaseReq: ["m2_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1e28); },
    },
    "k3_14": {
        category: "Abilities",
        title: "Mana Fountain",
        desc: "Gain 1% of Mana gain on Mana Ritual each time you clear a tower.",
        req: ["k3_13"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN(1e252); },
    },
    "k3_15": {
        category: "Abilities",
        title: "Free Karma Upgrades",
        desc: "Karma Upgrades are no longer priced.",
        req: ["k3_14"],
        isBool: true,
        disp(x) { return ""; },
        costType: "karma",
        cost(x) { return EN("e756"); },
    },
    
    "e1": {
        category: "Boosts",
        title: "Elemite Multiplier",
        desc: "Increase Elemite gain by ×+0.2, additively.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "elemite",
        cost(x) { return EN(10).add(EN.mul(5, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 10, 5, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 10, 5, x) },
        effect(x) { return x.mul(0.2).add(1); },
    },
    "e1_1": {
        category: "Boosts",
        title: "Elemite to Mana",
        desc: "Increase Mana gain by ×1.05, compounding.",
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(50).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 50, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 50, 10, x) },
        effect(x) { return EN.pow(upgEffect("e1_5"), x); },
    },
    "e1_2": {
        category: "Boosts",
        title: "Elemite to Karma",
        desc: "Increase Karma gain by ×1.05, compounding.",
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(50).add(EN.mul(10, x)); },
        inv(x, y) { return EN.affordArithmeticSeries(y, 50, 10, x) },
        invSum(x, y) { return EN.sumArithmeticSeries(y, 50, 10, x) },
        effect(x) { return EN.pow(upgEffect("e1_5"), x); },
    },
    "e1_3": {
        category: "Boosts",
        title: "Elemite Ritual Exp.",
        desc: "Raise Elemite Ritual gain by ^+0.05, additively.",
        max: EN(25),
        req: ["e3"],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(100000000).mul(EN.pow(5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 100000000, 5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100000000, 5, x) },
        effect(x) { return EN.mul(0.05, x).add(1); },
    },
    "e1_4": {
        category: "Boosts",
        title: "Elemite Ritual Mul.",
        desc: "Multiply Elemite Ritual gain by ×1.25, additively.",
        max: EN(25),
        req: ["e1_3", 1],
        disp(x) { return "×" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(250000000).mul(EN.pow(10, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 250000000, 10, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 250000000, 10, x) },
        effect(x) { return EN.pow(1.25, x); },
    },
    "e1_5": {
        category: "Boosts",
        title: "M.M.K.K.M.K.K.",
        desc: "Increase Elemite to Mana and Karma gain per upgrade.",
        req: ["e1_4", 1],
        disp(x) { return "×" + format(this.effect(x), 3); },
        costType: "elemite",
        cost(x) { return EN(1e9).mul(EN.pow(5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e9, 5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e9, 5, x) },
        effect(x) { return x.mul(upgEffect("e1_6")).add(1.05); },
    },
    "e1_6": {
        category: "Boosts",
        title: "M.M.K.K.M.K.K. II",
        desc: "Increase M.M.K.K.M.K.K. gain per upgrade.",
        req: ["e1_5", 1],
        disp(x) { return "+" + format(this.effect(x), 4); },
        costType: "elemite",
        cost(x) { return EN(1e12).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e12, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e12, 2, x) },
        effect(x) { return x.mul(upgEffect("e1_7")).add(0.001); },
    },
    "e1_7": {
        category: "Boosts",
        title: "M.M.K.K.M.K.K. DX",
        desc: "Your progress in The Rift increases M.M.K.K.M.K.K. II.",
        req: ["e1_6", 1],
        disp(x) { return "+" + format(this.effect(x), 4, true); },
        costType: "elemite",
        cost(x) { return EN(2e12).mul(EN.pow(2, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 2e12, 2, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 2e12, 2, x) },
        effect(x) { return x.mul(game.rift).add(0.0001); },
    },
    "e1_8": {
        category: "Boosts",
        title: "Mana to Elemite II",
        desc: "^x of log(Mana) multiplies Elemite gain.",
        max: EN(50),
        req: ["e1_7", 1],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(5e12).mul(EN.pow(3, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 5e12, 3, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 5e12, 3, x) },
        effect(x) { return x.mul(0.01).add(x.gt(0) ? .09 : 0); },
    },
    "e1_9": {
        category: "Boosts",
        title: "Mana to Elemite II",
        desc: "^x of log(Karma) multiplies Elemite gain.",
        max: EN(50),
        req: ["e1_8", 1],
        disp(x) { return "^" + format(this.effect(x)); },
        costType: "elemite",
        cost(x) { return EN(1e16).mul(EN.pow(5, x)); },
        inv(x, y) { return EN.affordGeometricSeries(y, 1e16, 5, x) },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1e16, 5, x) },
        effect(x) { return x.mul(0.01).add(x.gt(0) ? .04 : 0); },
    },
    
    "e2": {
        category: "Elemental",
        title: "Spell of Fire+",
        desc: "Increase effect by ×+0.1, but also increase cost by ×1.1.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "elemite",
        cost(x) { return EN(100).mul(EN.pow(1.12, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.12, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.12, x) },
        effect(x) { return x.mul(0.1).add(2); },
    },
    "e2_1": {
        category: "Elemental",
        title: "Spell of Ice+",
        desc: "Increase duration by +1, but also increase cost by ×1.1.",
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(100).mul(EN.pow(1.12, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.12, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.12, x) },
        effect(x) { return x.toNumber() + 10; },
    },
    "e2_2": {
        category: "Elemental",
        title: "Spell of Earth+",
        desc: "Increase effect by ×+0.1, but also increase cost by ×1.1.",
        disp(x) { return "×" + format(this.effect(x), 1); },
        costType: "elemite",
        cost(x) { return EN(100).mul(EN.pow(1.12, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.12, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.12, x) },
        effect(x) { return x.mul(0.1).add(2); },
    },
    "e2_3": {
        category: "Elemental",
        title: "Spell of Wind+",
        desc: "Increase duration by +1, but also increase cost by ×1.1.",
        max: EN(20),
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(100).mul(EN.pow(1.12, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 100, 1.12, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 100, 1.12, x) },
        effect(x) { return x.toNumber() + 10; },
    },
    "e2_4": {
        category: "Elemental",
        title: "Spell of Fire S",
        desc: "Decrease cooldown by -1, but also increase cost by ×1.2.",
        max: EN(9),
        req: ["e2"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(1000).mul(EN.pow(5, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 5, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 5, x) },
        effect(x) { return 10 - x.toNumber(); },
    },
    "e2_5": {
        category: "Elemental",
        title: "Spell of Ice S",
        desc: "Decrease cooldown by -1, but also increase cost by ×1.2.",
        max: EN(9),
        req: ["e2_1"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(1000).mul(EN.pow(5, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 5, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 5, x) },
        effect(x) { return 10 - x.toNumber(); },
    },
    "e2_6": {
        category: "Elemental",
        title: "Spell of Earth S",
        desc: "Decrease cooldown by -1, but also increase cost by ×1.2.",
        max: EN(9),
        req: ["e2_2"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(1000).mul(EN.pow(5, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 5, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 5, x) },
        effect(x) { return 10 - x.toNumber(); },
    },
    "e2_7": {
        category: "Elemental",
        title: "Spell of Wind S",
        desc: "Decrease cooldown by -1, but also increase cost by ×1.2.",
        max: EN(9),
        req: ["e2_3"],
        disp(x) { return format(this.effect(x), 0); },
        costType: "elemite",
        cost(x) { return EN(1000).mul(EN.pow(5, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 5, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 5, x) },
        effect(x) { return 10 - x.toNumber(); },
    },
    "e2_8": {
        category: "Elemental",
        title: "Spell of Wind++",
        desc: "Decrease interval by 2%, but also increase cost by ×1.1.",
        max: EN(50),
        req: ["e2_3", 20],
        disp(x) { return format(this.effect(x), 0) + "ms"; },
        costType: "elemite",
        cost(x) { return EN(1000).mul(EN.pow(1.12, x)); },
        invSum(x, y) { return EN.sumGeometricSeries(y, 1000, 1.12, x) },
        inv(x, y) { return EN.affordGeometricSeries(y, 1000, 1.12, x) },
        effect(x) { return 300 * .98 ** x.toNumber(); },
    },
    "e3": {
        category: "Abilities",
        title: "The Rift",
        desc: "Unlocks the Rift.",
        req: ["k2_4"],
        isBool: true,
        disp(x) { return ""; },
        costType: "elemite",
        cost(x) { return EN(50000000) },
    },
    "e3_1": {
        category: "Abilities",
        title: "Auto Mana Pack",
        desc: "Retain Free Mana Upgrades and Auto Mana Upgrades on Elemite Rituals.",
        req: ["e3"],
        isBool: true,
        disp(x) { return ""; },
        costType: "elemite",
        cost(x) { return EN(1e14) },
    },
    "e3_2": {
        category: "Abilities",
        title: "Auto Karma Pack",
        desc: "Retain Free Karma Upgrades and Auto Karma Upgrades on Elemite Rituals.",
        req: ["e3_1"],
        isBool: true,
        disp(x) { return ""; },
        costType: "elemite",
        cost(x) { return EN(1e16) },
    },
}
